import React, { useState } from 'react';
import { gql } from '@apollo/client';
import { useMutation } from '@apollo/client/react';
import { v4 as uuidv4 } from 'uuid';

// Make sure your enums.gql is imported and compiled correctly
// For client-side code, you might need to manually create these enums in a .ts file
// to use them as types, or generate them from your GraphQL schema.
// For now, we'll assume they exist or use string literals for simplicity.
// For example:
enum Language {
  ENGLISH = "ENGLISH",
  SPANISH = "SPANISH",
  FRENCH = "FRENCH",
  GERMAN = "GERMAN",
  CHINESE = "CHINESE",
  JAPANESE = "JAPANESE",
  NORWEGIAN = "NORWEGIAN",
  OTHER = "OTHER",
}
// You'd ideally generate these from your schema.gql using a tool like graphql-codegen.

// Define your GraphQL mutation strings.
// In a larger project, these would typically be in separate .graphql files
// and imported, or generated by graphql-codegen.
const CREATE_JOB_MUTATION = gql`
  mutation CreateJob($input: CreateJobInput!) {
    createJob(input: $input) {
      id
      title
      company
      createdAt
    }
  }
`;

const CREATE_APPLICATION_MUTATION = gql`
  mutation CreateApplication($input: CreateApplicationInput!) {
    createApplication(input: $input) {
      id
      createdAt
      job {
        id
        title
        company
      }
    }
  }
`;

// Interface for the input type (you'd typically generate this from your schema too)
interface CreateJobInput {
  id: string;
  title: string;
  company: string;
  language: Language;
}

interface CreateApplicationInput {
  id: string;
  job_id: string; // Assuming UUIDs are strings
  sent?: string | null; // DateTime as RFC 3339 string
}

const CreateApplicationForm: React.FC = () => {
  const [jobTitle, setJobTitle] = useState('');
  const [jobCompany, setJobCompany] = useState('');
  const [jobLanguage, setJobLanguage] = useState<Language>(Language.ENGLISH); // Use the enum
  const [sentDate, setSentDate] = useState('');
  const [jobId, setJobId] = useState('');

  const [createJob, { loading: creatingJob, error: createJobError }] = useMutation<{ createJob: { id: string, title: string, company: string, createdAt: string } }, { input: CreateJobInput }>(CREATE_JOB_MUTATION);
  const [createApplication, { loading: creatingApplication, error: createApplicationError, data: newApplicationData }] = useMutation<{ createApplication: { id: string, createdAt: string, job: { id: string, title: string, company: string } } }, { input: CreateApplicationInput }>(CREATE_APPLICATION_MUTATION);

  const handleCreateJob = async () => {
    try {
      const newJobId = uuidv4();
      const { data } = await createJob({
        variables: {
          input: {
            id: newJobId,
            title: jobTitle,
            company: jobCompany,
            language: jobLanguage,
          },
        },
      });
      if (data?.createJob) {
        setJobId(data.createJob.id);
        alert(`Job "${data.createJob.title}" created with ID: ${data.createJob.id}`);
      }
    } catch (e: any) { // Use 'any' or check 'e' for instanceof ApolloError
      console.error("Error creating job:", e);
      alert(`Error creating job: ${e.message}`);
    }
  };

  const handleSubmitApplication = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!jobId) {
      alert("Please create or specify a Job ID first.");
      return;
    }

    try {
      const { data } = await createApplication({
        variables: {
          input: {
            id: uuidv4(),
            job_id: jobId,
            sent: sentDate ? new Date(sentDate).toISOString() : null,
          },
        },
      });
      if (data?.createApplication) {
        alert(`Application created! ID: ${data.createApplication.id}, Job: ${data.createApplication.job.title}`);
        setSentDate('');
      }
    } catch (e: any) { // Use 'any' or check 'e' for instanceof ApolloError
      console.error("Error creating application:", e);
      alert(`Error creating application: ${e.message}`);
    }
  };

  return (
    <div>
      <h2>1. Create a Job (if you don't have a Job ID)</h2>
      <div>
        <label>
          Job Title:
          <input type="text" value={jobTitle} onChange={(e) => setJobTitle(e.target.value)} disabled={creatingJob} />
        </label>
        <label>
          Company:
          <input type="text" value={jobCompany} onChange={(e) => setJobCompany(e.target.value)} disabled={creatingJob} />
        </label>
        <label>
          Language:
          <select value={jobLanguage} onChange={(e) => setJobLanguage(e.target.value as Language)} disabled={creatingJob}>
            {Object.values(Language).map((lang) => (
              <option key={lang} value={lang}>{lang}</option>
            ))}
          </select>
        </label>
        <button onClick={handleCreateJob} disabled={creatingJob || !jobTitle || !jobCompany}>
          {creatingJob ? 'Creating Job...' : 'Create New Job'}
        </button>
        {createJobError && <p style={{ color: 'red' }}>Error: {createJobError.message}</p>}
        {jobId && <p>Using Job ID: <strong>{jobId}</strong></p>}
      </div>

      <h2>2. Create a New Job Application</h2>
      <form onSubmit={handleSubmitApplication}>
        <div>
          <label>
            Job ID to link: (Get from above, or use an existing one)
            <input type="text" value={jobId} onChange={(e) => setJobId(e.target.value)} />
          </label>
        </div>
        <div>
          <label>
            Sent Date (optional, YYYY-MM-DD):
            <input type="date" value={sentDate} onChange={(e) => setSentDate(e.target.value)} />
          </label>
        </div>
        <button type="submit" disabled={creatingApplication || !jobId}>
          {creatingApplication ? 'Creating Application...' : 'Submit Application'}
        </button>
        {createApplicationError && <p style={{ color: 'red' }}>Error: {createApplicationError.message}</p>}
        {newApplicationData && <p>Last application created: {newApplicationData.createApplication.id}</p>}
      </form>
    </div>
  );
};

export default CreateApplicationForm;